---
description: "Vitest v1.2 testing standards and configuration for unit and integration tests"
globs: ["**/*.test.ts", "**/*.test.tsx", "vitest.config.ts"]
author: https://github.com/drengskapur/.cursor
---

# Vitest Testing Standards

## Configuration

### Base Setup

```yaml
requirements:
  version: "^3.0.5"
  dependencies:
    - vitest
    - @testing-library/react
    - @testing-library/jest-dom
    - happy-dom
```

### Project Configuration

```ts
// vitest.config.ts
import { defineConfig } from 'vitest/config';
import react from '@vitejs/plugin-react';
import tsconfigPaths from 'vite-tsconfig-paths';

export default defineConfig({
  plugins: [react(), tsconfigPaths()],
  test: {
    environment: 'happy-dom',
    globals: true,
    setupFiles: ['./tests/setup.ts'],
    coverage: {
      provider: 'istanbul',
      reporter: ['text', 'json', 'html'],
      thresholds: {
        statements: 80,
        branches: 80,
        functions: 80,
        lines: 80
      }
    }
  }
});
```

## Test Organization

### Directory Structure

```yaml
test_structure:
  components:
    __tests__:
      - Component unit tests
      - Component integration tests
  tests:
    unit:
      - Utility function tests
      - Helper tests
    integration:
      - Feature integration tests
      - API integration tests
    browser:
      - Browser-specific tests
    build:
      - Build process tests
      - Deployment tests
    setup:
      - Test configuration
      - Global mocks

  naming_convention:
    component_tests: "components/**/[name].test.{ts,tsx}"
    unit_tests: "tests/unit/[name].test.ts"
    integration_tests: "tests/integration/[name].test.ts"
    browser_tests: "tests/browser/[name].browser.test.ts"
    build_tests: "tests/[name].test.ts"
```

### Test Configuration

```yaml
configuration:
  timeouts:
    default: 5000
    integration: 30000
    browser: 60000
    build: 120000
    
  environments:
    component: "happy-dom"
    integration: "node"
    browser: "chrome"
    build: "node"
    
  setup_files:
    component: ["./tests/setup.ts"]
    integration: []
    browser: ["./tests/browser-setup.ts"]
    build: []
```

### Test File Pattern

```ts
// Component.test.tsx
import { expect, test, describe, beforeEach } from 'vitest';
import { render, screen } from '@testing-library/react';
import { Component } from './Component';

describe('Component', () => {
  beforeEach(() => {
    // Setup
  });

  test('renders correctly', () => {
    render(<Component />);
    expect(screen.getByRole('button')).toBeInTheDocument();
  });
});
```

## Testing Standards

### Component Testing

```yaml
test_types:
  rendering:
    - Initial state
    - Props handling
    - State changes
    - Event handling
  
  interaction:
    - User actions
    - Form submission
    - Navigation
    - Error states
  
  accessibility:
    - ARIA roles
    - Keyboard navigation
    - Screen reader
    - Focus management
```

### Mocking

```ts
// Mock example
vi.mock('next/navigation', () => ({
  useRouter() {
    return {
      push: vi.fn(),
      replace: vi.fn(),
      pathname: '/',
    }
  },
}));

// Mock verification
test('calls router.push', () => {
  const { push } = useRouter();
  expect(push).toHaveBeenCalledWith('/dashboard');
});
```

## Testing Utilities

### Custom Matchers

```ts
// tests/matchers.ts
import { expect } from 'vitest';

expect.extend({
  toHaveClasses(received: HTMLElement, ...classes: string[]) {
    const pass = classes.every(cls => 
      received.classList.contains(cls)
    );
    
    return {
      pass,
      message: () => `expected element to${
        pass ? ' not' : ''
      } have classes: ${classes.join(', ')}`,
    };
  },
});
```

### Test Helpers

```ts
// tests/helpers.ts
export function createMockUser(overrides = {}) {
  return {
    id: 'user-1',
    name: 'Test User',
    email: 'test@example.com',
    ...overrides,
  };
}

export function mockApiResponse(data: any) {
  return {
    ok: true,
    json: async () => data,
    status: 200,
  };
}
```

## Best Practices

### Test Structure

```yaml
test_guidelines:
  - Use descriptive test names
  - Follow AAA pattern
  - Keep tests focused
  - Test edge cases
  - Avoid test interdependence
```

### Assertions

```yaml
assertion_practices:
  - Use semantic queries
  - Check accessibility
  - Verify state changes
  - Test error handling
  - Validate user feedback
```

### Performance

```yaml
performance_guidelines:
  - Mock heavy operations
  - Clean up after tests
  - Use test isolation
  - Optimize setup/teardown
  - Cache test data
```

### Code Coverage

```yaml
coverage_requirements:
  - Minimum 80% coverage
  - Cover all branches
  - Test error paths
  - Include edge cases
  - Document exclusions
```

## Common Patterns

### Setup Files

```ts
// tests/setup.ts
import '@testing-library/jest-dom';
import { expect, afterEach, vi } from 'vitest';
import { cleanup } from '@testing-library/react';
import * as matchers from '@testing-library/jest-dom/matchers';

expect.extend(matchers);

afterEach(() => {
  cleanup();
  vi.clearAllMocks();
});
```

### Mock Implementations

```ts
// tests/__mocks__/utils.ts
import { vi } from 'vitest';

export const formatDate = vi.fn(date => date.toISOString());
export const generateId = vi.fn(() => 'test-id');
export const fetchData = vi.fn().mockResolvedValue({ data: [] });
```

### Test Fixtures

```ts
// tests/fixtures.ts
export const mockUser = {
  id: 'user-1',
  name: 'Test User',
  email: 'test@example.com',
};

export const mockPosts = [
  { id: 1, title: 'Post 1' },
  { id: 2, title: 'Post 2' },
];
```
